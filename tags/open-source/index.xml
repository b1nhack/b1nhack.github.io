<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>open source on b1n.io</title>
    <link>https://b1n.io/tags/open-source/</link>
    <description>Recent content in open source on b1n.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 26 Dec 2022 01:24:06 -0500</lastBuildDate><atom:link href="https://b1n.io/tags/open-source/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SharkLoadLibrary</title>
      <link>https://b1n.io/posts/sharkloadlibrary/</link>
      <pubDate>Mon, 26 Dec 2022 01:24:06 -0500</pubDate>
      
      <guid>https://b1n.io/posts/sharkloadlibrary/</guid>
      <description>SharkLoadLibrary 是 DarkLoadLibrary 的完整版
在DarkLoadLibrary中的darkloadlibrary.h文件中, 作者定义了一组宏, 用于Control Flags
#define LOAD_LOCAL_FILE 0x00000001 #define LOAD_REMOTE_FILE 0x00000002 #define LOAD_MEMORY	0x00000003 #define NO_LINK	0x00010000 可以看到, 作者早就定义好了LOAD_REMOTE_FILE的宏, 只不过在公开项目时删除了相关功能
我将功能完善了, 开源在github供大家使用: SharkLoadLibrary
以下是项目介绍:
LoadLibrary for Children&amp;rsquo;s Paradise.
:sailboat: Folk From DarkLoadLibrary and thanks.
Feature New feature: LOAD_REMOTE_FILE
Usage PDARKMODULE DarkModule = DarkLoadLibrary( LOAD_REMOTE_FILE, // control flags &amp;#34;http://xxxx/demo.dll&amp;#34;, // remote dll url, if loading from remote NULL, // dll buffer to load from if loading from memory 0, // dll size if loading from memory L&amp;#34;Demo&amp;#34; // dll name if loaded from memory and remote ); Build &amp;amp;&amp;amp; Test Environmental requirements libcurl</description>
    </item>
    
    <item>
      <title>Cpp Shellcode</title>
      <link>https://b1n.io/posts/cpp-shellcode/</link>
      <pubDate>Sat, 24 Dec 2022 01:32:07 -0500</pubDate>
      
      <guid>https://b1n.io/posts/cpp-shellcode/</guid>
      <description>I made a repository of Windows Shellcode runners: cpp-shellcode.
Here are some introductions:
cpp-shellcode is A repository of Windows Shellcode runners. The applications load and execute Shellcode using various API calls or techniques.
❤️ THANKS @go-shellcode
The available Shellcode runners include:
CreateFiber CreateRemoteThread CreateThread EtwpCreateEtwThread NtQueueApcThreadEx-Local CreateFiber This application leverages the Windows CreateFiber function from the Kernel32.dll to execute shellcode within this application&amp;rsquo;s process. This is usefull when you want to avoid remote process injection and want to avoid calling CreateThread.</description>
    </item>
    
  </channel>
</rss>
